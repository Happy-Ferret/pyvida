#!/usr/bin/python3

from PIL import Image
from math import sin, cos, pi

import os, sys, argparse

parser = argparse.ArgumentParser(description='Convert the image into a strip of images that sways.')

parser.add_argument('infile', help='File to apply sway animation to')
parser.add_argument('outfile', help='File to store animation')
parser.add_argument('-c', '--cos', help='Use cos instead of sin', action="store_true")
parser.add_argument('-s', '--scale', help='amplify is the sway', type=float, default=1.0)


def sway(inname, outname, factor=1.0, fn=sin):
    im = Image.open(inname)
    png_info = im.info
    w,h = im.size
    num_of_frames = 20
    new_image = Image.new(im.mode, (w*num_of_frames, h))
    delta = 2*pi/num_of_frames
    scale = 10
    factor = 0.002 * factor
    print("Swaying %s over %i frames"%(inname, num_of_frames))
    for i in range(0, num_of_frames):
        sway = fn(i*delta)*factor
    #    sway = .1
        data = [1.0,-sway,0.0,0.0,1.0,0.0]
        frame = im.transpose(Image.FLIP_TOP_BOTTOM) #flip
        frame = frame.resize((w*scale, h*scale), Image.ANTIALIAS) #resize for subpixel swap
        frame = frame.transform((w*scale,h*scale), Image.AFFINE, data) #shear from new top
        frame = frame.resize((w, h), Image.ANTIALIAS) #resize back
        frame = frame.transpose(Image.FLIP_TOP_BOTTOM) #flip back
        new_image.paste(frame, (i*w, 0))
    #new_image.show()
    new_image.save(outname, **png_info)
    details = "%s.montage"%os.path.splitext(outname)[0]
    with open(details, mode='w', encoding='utf-8') as f:
        f.write('{}\n{}\n{}\n'.format(num_of_frames, w, h)) 
    print("done.")

if __name__ == "__main__":
    args = parser.parse_args()
    inname = args.infile
    outname = args.outfile
    sway(inname, outname, factor=args.scale, fn=cos if args.cos else sin)
